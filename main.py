import os
import asyncio
import logging
import datetime
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from aiohttp import web
from bs4 import BeautifulSoup
from telegram.request import HTTPXRequest

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")
PORT = int(os.environ.get("PORT", 10000))

logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
start_time = datetime.datetime.now()

def write_log(msg: str):
    print(f"[{datetime.datetime.now():%Y-%m-%d %H:%M:%S}] {msg}")
    logger.info(msg)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 üöÄ")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import aiohttp
    import datetime

    uptime = datetime.datetime.now() - start_time
    status_msg = f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n‚è± –ê–ø—Ç–∞–π–º: {uptime}\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    last_info = "üìä –î–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç (–±–æ—Ç –∂–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞)."
    if os.path.exists(LAST_PURCHASE_FILE):
        with open(LAST_PURCHASE_FILE, "r") as f:
            last_date = f.read().strip()
            if last_date:
                last_info = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {last_date}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
site_status = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
try:
    async with aiohttp.ClientSession() as session:
        async with session.get(CHECK_URL, timeout=10) as resp:
            if resp.status == 200:
                site_status = "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else:
                site_status = f"‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–∞–π—Ç–∞: {resp.status}"
except Exception as e:
    site_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(e).__name__}"

        # === –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö BTC —Å SaylorTracker ===
    total_btc_info = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö"
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get("https://saylortracker.com/", timeout=15) as resp:
                if resp.status == 200:
                    html = await resp.text()
                    soup = BeautifulSoup(html, "html.parser")
                    total_elem = soup.find("strong", string=lambda s: s and "Total" in s)
                    if total_elem:
                        total_text = total_elem.find_next("td").get_text(strip=True)
                        total_btc_info = f"üìä –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ BTC: {total_text}"
                    else:
                        total_btc_info = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–∞–π—Ç–µ"
                else:
                    total_btc_info = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞ ({resp.status})"
    except Exception as e:
        total_btc_info = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {type(e).__name__}"

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å MicroStrategy —á–µ—Ä–µ–∑ bitcointreasuries.net
    btc_balance_info = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å BTC"
    try:
        api_url = "https://bitcointreasuries.net/api/v2/companies"
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, timeout=15) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    for c in data:
                        if "MicroStrategy" in c.get("name", ""):
                            btc = c.get("bitcoin", "0")
                            usd = c.get("usd_value", "0")
                            price = c.get("btc_price", "0")
                            btc_balance_info = (
                                f"üí∞ –ë–∞–ª–∞–Ω—Å MicroStrategy: {btc} BTC (~${usd})\n"
                                f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${price}"
                            )
                            break
                else:
                    btc_balance_info = f"‚ö†Ô∏è API –æ—Ç–≤–µ—Ç: {resp.status}"
    except Exception as e:
        btc_balance_info = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {type(e).__name__}"

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = (
        f"{status_msg}\n"
        f"{last_info}\n"
        f"{btc_balance_info}\n"
        f"{total_btc_info}\n"
        f"{site_status}\n"
        f"üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {CHECK_URL}"
    )

    await update.message.reply_text(msg)

async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.datetime.now() - start_time
    await update.message.reply_text(f"‚è± –ê–ø—Ç–∞–π–º: {uptime}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/status ‚Äî –∞–ø—Ç–∞–π–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/uptime ‚Äî –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
        "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/site ‚Äî –∫–∞–∫–æ–π —Å–∞–π—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è\n"
        "/clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Render-–∏–Ω—Å—Ç–∞–Ω—Å–∞ (–∞–¥–º–∏–Ω)\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    commit = os.getenv("RENDER_GIT_COMMIT", "N/A")
    instance = os.getenv("RENDER_INSTANCE_ID", "N/A")
    uptime = datetime.datetime.now() - start_time
    msg = (
        f"üß† *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*\n"
        f"Commit: `{commit}`\n"
        f"Instance: `{instance}`\n"
        f"Uptime: {uptime}\n"
        f"Server Time: {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Render-–∏–Ω—Å—Ç–∞–Ω—Å–∞...")
    os._exit(0)

# === –ö–æ–º–∞–Ω–¥–∞ /clear (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ polling –∏ Render) ===
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º"""
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    chat_id = update.effective_chat.id
    bot = context.bot
    deleted = 0

    try:
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏—Ö message_id (–¥–æ 50 –Ω–∞–∑–∞–¥)
        current_msg_id = update.message.message_id
        for msg_id in range(current_msg_id - 50, current_msg_id):
            try:
                await bot.delete_message(chat_id, msg_id)
                deleted += 1
                await asyncio.sleep(0.1)
            except Exception:
                pass  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç—É

        await update.message.reply_text(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted}")
    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}\n"
            "–°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10‚Äì15 —Å–µ–∫—É–Ω–¥."
        )

# === Health-check ===
async def handle(request):
    return web.Response(text="‚úÖ SaylorWatchBot is alive")

async def start_healthcheck_server():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    write_log(f"üåê Health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SaylorTracker ===
LAST_PURCHASE_FILE = "last_purchase.txt"
CHECK_URL = os.getenv("CHECK_URL", "https://saylortracker.com/")

async def fetch_latest_purchase():
    import aiohttp
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CHECK_URL, timeout=20) as resp:
                if resp.status != 200:
                    return None
                html = await resp.text()
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None

    soup = BeautifulSoup(html, "html.parser")
    table = soup.find("table")
    if not table:
        return None
    rows = table.find_all("tr")
    if len(rows) < 2:
        return None
    cells = [c.get_text(strip=True) for c in rows[1].find_all("td")]
    if len(cells) < 4:
        return None
    date, amount, price, total = cells[0], cells[1], cells[2], cells[3]
    return {"date": date, "amount": amount, "price": price, "total": total}

async def monitor_saylor_purchases(bot: Bot):
    last_date = None
    if os.path.exists(LAST_PURCHASE_FILE):
        with open(LAST_PURCHASE_FILE, "r") as f:
            last_date = f.read().strip()
    write_log(f"üïµÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {CHECK_URL}")
    while True:
        try:
            purchase = await fetch_latest_purchase()
            if purchase and purchase["date"] != last_date:
                msg = (
                    f"üí∞ *MicroStrategy –∫—É–ø–∏–ª–∞ Bitcoin!*\n"
                    f"üìÖ –î–∞—Ç–∞: {purchase['date']}\n"
                    f"‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {purchase['amount']}\n"
                    f"üíµ –°—É–º–º–∞: {purchase['total']}\n"
                    f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {CHECK_URL}"
                )
                await bot.send_message(chat_id=X_CHAT_ID, text=msg, parse_mode="Markdown")
                last_date = purchase["date"]
                with open(LAST_PURCHASE_FILE, "w") as f:
                    f.write(last_date)
            else:
                write_log("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        except Exception as e:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(15 * 60)

# === –ê–≤—Ç–æ–ø–∏–Ω–≥ ===
async def ping_alive(bot: Bot):
    while True:
        await asyncio.sleep(6 * 60 * 60)
        uptime = datetime.datetime.now() - start_time
        try:
            await bot.send_message(chat_id=X_CHAT_ID, text=f"‚úÖ Still alive (uptime: {uptime})")
        except Exception as e:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: {e}")

# === Post-init ===
async def _post_init(application: Application):
    try:
        # üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook –∏ –ª—é–±—ã—Ö polling-—Å–µ—Å—Å–∏–π
        await application.bot.delete_webhook(drop_pending_updates=True)
        write_log("üßπ Telegram webhook –∏ polling-—Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã (post_init)")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ polling-—Å–µ—Å—Å–∏–π: {e}")

    # üîÅ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    application.create_task(start_healthcheck_server())
    application.create_task(monitor_saylor_purchases(application.bot))
    application.create_task(ping_alive(application.bot))

    write_log("üß© post_init –∑–∞–≤–µ—Ä—à—ë–Ω")

# === –ö–æ–º–∞–Ω–¥–∞ /site ===
async def site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —Å–∞–π—Ç:\n{CHECK_URL}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    request = HTTPXRequest(connection_pool_size=50, read_timeout=30, write_timeout=30)
    app = (
        Application.builder()
        .token(BOT_TOKEN)
        .request(request)
        .post_init(_post_init)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("uptime", uptime))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("site", site))

if __name__ == "__main__":
    asyncio.run(app.run_polling())
