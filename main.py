import os
import asyncio
import logging
import datetime
import threading
import atexit
from aiohttp import web
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")  # —Ç–≤–æ–π Telegram Chat ID (–∞–¥–º–∏–Ω)
PORT = int(os.environ.get("PORT", 10000))

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)
start_time = datetime.datetime.now()

def write_log(msg):
    print(f"[{datetime.datetime.now():%Y-%m-%d %H:%M:%S}] {msg}")
    logger.info(msg)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 üöÄ")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.datetime.now() - start_time
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n‚è± –ê–ø—Ç–∞–π–º: {uptime}")

async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.datetime.now() - start_time
    await update.message.reply_text(f"‚è± –ê–ø—Ç–∞–π–º: {uptime}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/status ‚Äî –∞–ø—Ç–∞–π–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/uptime ‚Äî –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
        "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–¥–º–∏–Ω)\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    commit = os.getenv("RENDER_GIT_COMMIT", "N/A")
    instance = os.getenv("RENDER_INSTANCE_ID", "N/A")
    uptime = datetime.datetime.now() - start_time
    msg = (
        f"üß† *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*\n"
        f"Commit: `{commit}`\n"
        f"Instance: `{instance}`\n"
        f"Uptime: {uptime}\n"
        f"Server Time: {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    chat_id = update.message.chat_id
    await update.message.reply_text("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    try:
        async for msg in context.bot.get_chat(chat_id).iter_history():
            try:
                await context.bot.delete_message(chat_id, msg.message_id)
            except Exception:
                pass
        await context.bot.send_message(chat_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Render-–∏–Ω—Å—Ç–∞–Ω—Å–∞...")
    os._exit(0)

# === –û—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ ===
async def clear_pending_updates(token):
    bot = Bot(token)
    updates = await bot.get_updates()
    if updates:
        await bot.delete_webhook(drop_pending_updates=True)
        write_log(f"üßπ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ({len(updates)})")
    else:
        write_log("üßπ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
async def notify_start(token, chat_id):
    try:
        bot = Bot(token)
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω / Bot is live\n‚è∞ {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
        )
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")

def notify_shutdown():
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        bot = Bot(BOT_TOKEN)
        loop.run_until_complete(
            bot.send_message(
                chat_id=X_CHAT_ID,
                text=f"üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É / Bot is shutting down\n‚è∞ {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
            )
        )
    except RuntimeError as e:
        write_log(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º RuntimeError –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    finally:
        try:
            loop.close()
        except Exception:
            pass

atexit.register(notify_shutdown)

# === –ê–≤—Ç–æ-–ø–∏–Ω–≥ (alive check) ===
async def ping_alive(bot: Bot):
    while True:
        await asyncio.sleep(6 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        uptime = datetime.datetime.now() - start_time
        try:
            await bot.send_message(
                chat_id=X_CHAT_ID,
                text=f"‚úÖ Still alive (uptime: {uptime})"
            )
        except Exception as e:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: {e}")

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä ===
async def handle(request):
    return web.Response(text="‚úÖ SaylorWatchBot v4.1 is running")

def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    web.run_app(app, host="0.0.0.0", port=PORT)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def run_bot():
    await clear_pending_updates(BOT_TOKEN)
    await notify_start(BOT_TOKEN, X_CHAT_ID)

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("uptime", uptime))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("restart", restart))

    # –ê–≤—Ç–æ-–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    bot = Bot(BOT_TOKEN)
    asyncio.create_task(ping_alive(bot))

    try:
        await app.run_polling(close_loop=False, allowed_updates=Update.ALL_TYPES)
    except RuntimeError:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()

def main():
    threading.Thread(target=start_web_server, daemon=True).start()
    asyncio.run(run_bot())

if __name__ == "__main__":
    main()
