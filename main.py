import os
import asyncio
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === CONFIGURATION ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")
CHECK_URL = os.getenv("CHECK_URL", "https://saylortracker.com")
CHECK_INTERVAL_MIN = int(os.getenv("CHECK_INTERVAL_MIN", "15"))

# === LOGGING ===
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

def write_log(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {message}"
    print(line)
    with open("saylorbot.log", "a", encoding="utf-8") as f:
        f.write(line + "\n")

# === RESET WEBHOOK ===
def clear_webhook(bot_token: str):
    try:
        url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook?drop_pending_updates=true"
        r = requests.get(url, timeout=10)
        if r.ok:
            write_log("‚úÖ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (cleared successfully)")
        else:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {r.text}")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

# === COMMAND HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø SaylorWatchBot.\n"
        "–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞–π—Ç–æ–º SaylorTracker –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø–æ–∫—É–ø–∫–∞—Ö BTC.\n\n"
        "üëã Hello! I'm SaylorWatchBot.\n"
        "I'll notify you when Bitcoin balance changes on SaylorTracker."
    )
    await update.message.reply_text(msg)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7.\n"
        f"URL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {CHECK_URL}\n\n"
        "‚úÖ Bot is active and running 24/7.\n"
        f"Monitoring URL: {CHECK_URL}"
    )
    await update.message.reply_text(msg)

# === MONITOR SITE ===
async def check_site(app):
    last_balance = None
    while True:
        try:
            r = requests.get(CHECK_URL, timeout=15)
            if r.status_code == 200:
                content = r.text
                marker = "‚Çø"
                current_balance = content.count(marker)

                if last_balance is None:
                    last_balance = current_balance
                elif current_balance != last_balance:
                    last_balance = current_balance
                    msg = (
                        "‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ SaylorTracker!\n"
                        "‚ö° Bitcoin balance has changed on SaylorTracker!"
                    )
                    await app.bot.send_message(chat_id=X_CHAT_ID, text=msg)
                    write_log("üì¢ Notification sent ‚Äî BTC balance changed")
            else:
                write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {r.status_code}")
        except Exception as e:
            write_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}")

        await asyncio.sleep(CHECK_INTERVAL_MIN * 60)

# === LAUNCHER ===
async def run_bot():
    write_log("üöÄ SaylorWatchBot –∑–∞–ø—É—â–µ–Ω / started (24/7 mode)")
    clear_webhook(BOT_TOKEN)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))

    asyncio.create_task(check_site(app))
    write_log("üåê Web server started and polling initialized")

    # –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º healthcheck
    while True:
        try:
            await app.initialize()
            await app.start()
            write_log("ü§ñ Polling –∑–∞–ø—É—â–µ–Ω")

            # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
            while True:
                await asyncio.sleep(60)  # Render –Ω–µ –ª—é–±–∏—Ç idle –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                # health ping
                try:
                    requests.get("https://render.com", timeout=5)
                except Exception:
                    pass
        except Exception as e:
            write_log(f"üí• –û—à–∏–±–∫–∞ polling: {e}")
            write_log("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
        finally:
            await app.stop()
            await app.shutdown()

# === ENTRY POINT ===
if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except RuntimeError:
        write_log("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è Render")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_bot())
