import os
import asyncio
import logging
import datetime
import threading
import atexit
from aiohttp import web
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")
PORT = int(os.environ.get("PORT", 10000))

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

def write_log(msg):
    print(f"[{datetime.datetime.now():%Y-%m-%d %H:%M:%S}] {msg}")
    logger.info(msg)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 üöÄ")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ ===
async def clear_pending_updates(token):
    try:
        bot = Bot(token)
        updates = await bot.get_updates()
        if updates:
            await bot.delete_webhook(drop_pending_updates=True)
            write_log(f"üßπ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞ ({len(updates)})")
        else:
            write_log("üßπ –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤: {e}")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ ===
async def notify_start(token, chat_id):
    try:
        bot = Bot(token)
        await asyncio.sleep(3)
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ / Bot is live (Render)\n‚è∞ {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
        )
        write_log("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ===
def notify_shutdown():
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        bot = Bot(BOT_TOKEN)
        loop.run_until_complete(
            bot.send_message(
                chat_id=X_CHAT_ID,
                text=f"üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É / Bot is shutting down (Render)\n‚è∞ {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
            )
        )
        write_log("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

atexit.register(notify_shutdown)

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="‚úÖ SaylorWatchBot is running")

def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    web.run_app(app, host="0.0.0.0", port=PORT)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def run_bot():
    write_log("üöÄ SaylorWatchBot –∑–∞–ø—É—â–µ–Ω / started (24/7 mode)")

    await clear_pending_updates(BOT_TOKEN)
    write_log("‚úÖ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (cleared successfully)")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))

    await notify_start(BOT_TOKEN, X_CHAT_ID)

    try:
        await application.run_polling(close_loop=False, allowed_updates=Update.ALL_TYPES)
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            write_log("‚öôÔ∏è Event loop —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
            await application.initialize()
            await application.start()
            await application.updater.start_polling()
        else:
            raise e

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    threading.Thread(target=start_web_server, daemon=True).start()
    try:
        asyncio.run(run_bot())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_bot())

if __name__ == "__main__":
    main()
