import os
import asyncio
import logging
import datetime
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from aiohttp import web
from bs4 import BeautifulSoup

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")
PORT = int(os.environ.get("PORT", 10000))

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)
start_time = datetime.datetime.now()


def write_log(msg: str):
    print(f"[{datetime.datetime.now():%Y-%m-%d %H:%M:%S}] {msg}")
    logger.info(msg)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 üöÄ")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.datetime.now() - start_time
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n‚è± –ê–ø—Ç–∞–π–º: {uptime}")

async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.datetime.now() - start_time
    await update.message.reply_text(f"‚è± –ê–ø—Ç–∞–π–º: {uptime}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/status ‚Äî –∞–ø—Ç–∞–π–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/uptime ‚Äî –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n"
        "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/site ‚Äî –∫–∞–∫–æ–π —Å–∞–π—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è\n"
        "/clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Render-–∏–Ω—Å—Ç–∞–Ω—Å–∞ (–∞–¥–º–∏–Ω)\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    commit = os.getenv("RENDER_GIT_COMMIT", "N/A")
    instance = os.getenv("RENDER_INSTANCE_ID", "N/A")
    uptime = datetime.datetime.now() - start_time
    msg = (
        f"üß† *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*\n"
        f"Commit: `{commit}`\n"
        f"Instance: `{instance}`\n"
        f"Uptime: {uptime}\n"
        f"Server Time: {datetime.datetime.now():%Y-%m-%d %H:%M:%S}"
    )
    await update.message.reply_text(msg, parse_mode="Markdown")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Render-–∏–Ω—Å—Ç–∞–Ω—Å–∞...")
    os._exit(0)

# === –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    chat_id = update.message.chat_id
    bot = context.bot
    deleted = 0

    try:
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∞–ø–¥–µ–π—Ç–æ–≤ –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        updates = await bot.get_updates(limit=100)
        for upd in updates:
            if upd.message and upd.message.from_user and upd.message.from_user.is_bot:
                try:
                    await bot.delete_message(chat_id, upd.message.message_id)
                    deleted += 1
                    await asyncio.sleep(0.15)
                except Exception:
                    pass
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        return

    await update.message.reply_text(
        f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: {deleted}\n"
        "‚ùó Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç' –≤—Ä—É—á–Ω—É—é."
    )

# === –û—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ ===
async def clear_pending_updates(token):
    bot = Bot(token)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        write_log("üßπ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")

        # === –ö–æ–º–∞–Ω–¥–∞ /clear ===
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    if str(update.effective_user.id) != str(X_CHAT_ID):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    chat_id = update.message.chat_id
    bot = context.bot
    deleted = 0

    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–º —á–∏—Å–ª–æ –∞–ø–¥–µ–π—Ç–æ–≤ –¥–æ 30 (–≤–º–µ—Å—Ç–æ 100)
        updates = await bot.get_updates(limit=30)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ (1‚Äì2/—Å–µ–∫)
        for upd in updates:
            if upd.message and upd.message.from_user and upd.message.from_user.is_bot:
                try:
                    await bot.delete_message(chat_id, upd.message.message_id)
                    deleted += 1
                    await asyncio.sleep(0.5)  # üëà –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}\n"
            "–°–æ–≤–µ—Ç: –ø–æ–¥–æ–∂–¥–∏ 10‚Äì15 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )
        return

    await update.message.reply_text(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: {deleted}")

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ ===
async def notify_start(token, chat_id):
    try:
        bot = Bot(token)
        commit = os.getenv("RENDER_GIT_COMMIT", "N/A")
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω / Bot is live\nüß© Commit: `{commit}`\n‚è∞ {datetime.datetime.now():%Y-%m-%d %H:%M:%S}",
            parse_mode="Markdown",
        )
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")

# === –ê–≤—Ç–æ–ø–∏–Ω–≥ ===
async def ping_alive(bot: Bot):
    while True:
        await asyncio.sleep(6 * 60 * 60)
        uptime = datetime.datetime.now() - start_time
        try:
            await bot.send_message(chat_id=X_CHAT_ID, text=f"‚úÖ Still alive (uptime: {uptime})")
        except Exception as e:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: {e}")

# === Health-check —Å–µ—Ä–≤–µ—Ä ===
async def handle(request):
    return web.Response(text="‚úÖ SaylorWatchBot is alive")

async def start_healthcheck_server():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    write_log(f"üåê Health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—É–ø–æ–∫ MicroStrategy ===
LAST_PURCHASE_FILE = "last_purchase.txt"

async def fetch_latest_purchase():
    import aiohttp
    url = "https://saylortracker.com/"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, timeout=20) as resp:
            html = await resp.text()

    soup = BeautifulSoup(html, "html.parser")
    table = soup.find("table")
    if not table:
        return None

    first_row = table.find("tr")
    if not first_row:
        return None

    cells = [c.get_text(strip=True) for c in first_row.find_all("td")]
    if len(cells) < 4:
        return None

    return {"date": cells[0], "amount": cells[1], "total": cells[3]}

async def monitor_saylor_purchases(bot: Bot):
    last_date = None
    if os.path.exists(LAST_PURCHASE_FILE):
        with open(LAST_PURCHASE_FILE, "r") as f:
            last_date = f.read().strip()

    while True:
        try:
            purchase = await fetch_latest_purchase()
            if not purchase:
                write_log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö MicroStrategy.")
            else:
                if purchase["date"] != last_date:
                    message = (
                        f"üí∞ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ Bitcoin!\n"
                        f"üìÖ –î–∞—Ç–∞: {purchase['date']}\n"
                        f"‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {purchase['amount']}\n"
                        f"üè¶ –°—É–º–º–∞: {purchase['total']}"
                    )
                    await bot.send_message(chat_id=X_CHAT_ID, text=message)
                    write_log(message)
                    last_date = purchase["date"]
                    with open(LAST_PURCHASE_FILE, "w") as f:
                        f.write(last_date)
                else:
                    write_log(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–æ–∫ MicroStrategy ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({purchase['date']})")
        except Exception as e:
            write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∫—É–ø–æ–∫: {e}")

        await asyncio.sleep(15 * 60)

# === –ö–æ–º–∞–Ω–¥–∞ /site ===
async def site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = os.getenv("CHECK_URL", "https://saylortracker.com/")
    await update.message.reply_text(f"üåê –¢–µ–∫—É—â–∏–π —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n{url}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    import asyncio

    write_log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SaylorWatchBot...")
    asyncio.run(clear_pending_updates(BOT_TOKEN))
    asyncio.run(notify_start(BOT_TOKEN, X_CHAT_ID))

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("uptime", uptime))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("site", site))

    bot = Bot(BOT_TOKEN)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(ping_alive(bot))
    loop.create_task(start_healthcheck_server())
    loop.create_task(monitor_saylor_purchases(bot))

    write_log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling")
    # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã Telegram —Å–±—Ä–æ—Å–∏–ª —Å—Ç–∞—Ä—ã–π polling
    loop.run_until_complete(asyncio.sleep(5))
    try:
        app.run_polling()
    except Exception as e:
        write_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
