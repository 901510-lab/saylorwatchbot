import asyncio
import logging
import os
import aiohttp
import hashlib
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.request import HTTPXRequest
from telegram.error import Conflict

# ----------------------------------------------------
# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ----------------------------------------------------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------------------------------------------
# üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ----------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
X_CHAT_ID = os.getenv("X_CHAT_ID")
CHECK_URL = os.getenv("CHECK_URL", "https://microstrategy.com/en/bitcoin")
CHECK_INTERVAL_MIN = int(os.getenv("CHECK_INTERVAL_MIN", 15))

# ----------------------------------------------------
# üß† –ö–æ–º–∞–Ω–¥—ã
# ----------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–∞–π—Ç–æ–º –∏ —Å–æ–æ–±—â–∏—Ç, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é: {CHECK_URL}\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_MIN} –º–∏–Ω—É—Ç")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üßπ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
    await context.bot.delete_webhook(drop_pending_updates=True)
    await update.message.reply_text("‚úÖ –û—á–µ—Ä–µ–¥—å Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.")

# ----------------------------------------------------
# üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞
# ----------------------------------------------------
async def monitor_site(bot):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤ Telegram"""
    previous_hash = None

    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(CHECK_URL, timeout=20) as response:
                    if response.status == 200:
                        html = await response.text()
                        current_hash = hashlib.sha256(html.encode()).hexdigest()

                        if previous_hash is None:
                            previous_hash = current_hash
                            logger.info("üì° –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                        elif current_hash != previous_hash:
                            previous_hash = current_hash
                            msg = f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ!\nüîó {CHECK_URL}"
                            await bot.send_message(chat_id=X_CHAT_ID, text=msg)
                            logger.info("üö® –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                        else:
                            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–∞–π—Ç –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º {response.status}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞: {e}")

        await asyncio.sleep(CHECK_INTERVAL_MIN * 60)

# ----------------------------------------------------
# üèì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Render (health-ping)
# ----------------------------------------------------
async def ping_alive():
    while True:
        logger.info("üíì Render ping ‚Äî –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        await asyncio.sleep(300)

# ----------------------------------------------------
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ----------------------------------------------------
async def main():
    request = HTTPXRequest(connection_pool_size=50, read_timeout=30, write_timeout=30)

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .request(request)
        .build()
    )

    # –û—á–∏—Å—Ç–∫–∞ webhook
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {e}")

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("clear", clear))

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    app.create_task(monitor_site(app.bot))
    app.create_task(ping_alive())

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling")
    await app.run_polling(close_loop=False)

# ----------------------------------------------------
# üß© –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫
# ----------------------------------------------------
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Conflict:
        logger.warning("‚ö†Ô∏è –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
